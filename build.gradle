plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.12'
    id 'org.openjfx.javafxplugin' version '0.0.13'
    id 'org.beryx.jlink' version '2.25.0'
}

group 'br.ufms'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.10.0'
}

sourceCompatibility = '20'
targetCompatibility = '20'

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'br.ufms.bancas'
    mainClass = 'br.ufms.bancas.App'
}

javafx {
    version = '22.0.1'
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web', 'javafx.swing']
}

dependencies {
    implementation('org.controlsfx:controlsfx:11.1.2')
    implementation('com.dlsc.formsfx:formsfx-core:11.6.0') {
        exclude(group: 'org.openjfx')
    }
    implementation('net.synedra:validatorfx:0.4.0') {
        exclude(group: 'org.openjfx')
    }
    implementation("net.raumzeitfalle.fx:scenic-view:11.0.2")
    implementation("fr.brouillard.oss:cssfx:11+") { exclude group: 'org.openjfx' }

    implementation platform('org.kordamp.ikonli:ikonli-bom:12.3.1')
    implementation 'org.kordamp.ikonli:ikonli-javafx'
    implementation "org.kordamp.ikonli:ikonli-fontawesome5-pack"
    implementation "org.kordamp.ikonli:ikonli-remixicon-pack"
    implementation("com.calendarfx:view:11.12.7")
//    implementation 'io.github.palexdev:virtualizedfx:21.5.0'
    implementation('io.github.palexdev:materialfx:11.17.0')

    // serialization and cloning
    implementation("com.esotericsoftware:kryo:5.6.0")

    //Logger
    implementation "org.apache.logging.log4j:log4j-core:2.23.1"
    implementation "org.apache.logging.log4j:log4j-api:2.23.1"

    // JSON binding
    implementation('com.fasterxml.jackson.core:jackson-databind:2.17.1')

    // Config binding
    implementation("org.aeonbits.owner:owner:1.0.12")

    // Dependency Injection
    implementation("jakarta.inject:jakarta.inject-api:2.0.1")
    implementation("com.google.inject:guice:7.0.0")

    implementation("org.hibernate.common:hibernate-commons-annotations:7.0.1.Final")

    // ORM
    implementation 'org.hibernate.orm:hibernate-core:6.4.8.Final'

    // Hibernate Validator
    implementation 'org.hibernate.validator:hibernate-validator:8.0.0.Final'
    implementation 'org.glassfish:jakarta.el:4.0.2'

    // Agroal connection pool
//    implementation('org.hibernate.orm:hibernate-agroal:6.4.8.Final')
//    implementation('io.agroal:agroal-pool:2.1')

    // Jakarta
    implementation("jakarta.enterprise:jakarta.enterprise.cdi-api:4.1.0")
    implementation 'jakarta.transaction:jakarta.transaction-api:2.0.0'
    implementation("jakarta.xml.bind:jakarta.xml.bind-api:4.0.2")

    // logging via Log4j
    implementation('org.apache.logging.log4j:log4j-core:2.20.0')

    // Database
    implementation("org.hsqldb:hsqldb:2.7.3")

    compileOnly('org.projectlombok:lombok:1.18.20')
    annotationProcessor('org.projectlombok:lombok:1.18.20')
    // JPA Metamodel Generator
    annotationProcessor('org.hibernate.orm:hibernate-jpamodelgen:6.4.8.Final')

    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}

jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip")
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'app'
    }
}

jlinkZip {
    group = 'distribution'
}